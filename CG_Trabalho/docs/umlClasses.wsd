/' http://plantuml.com/class-diagram '/ 
@startuml CG_Biblioteca

title Diagrama de Classes
footer Grupo GCG - [[http://gcg.inf.furb.br]]

Camera : - double xMin
Camera : - double xMax
Camera : - double yMin
Camera : - double yMax
Camera : - double zMin
Camera : - double zMax
Camera : + Camera(double xMin,double xMax,double yMin,double yMax,double zMin, double zMax)
Camera : + double xmin { get; set }
Camera : + double xmax { get; set }
Camera : + double ymin { get; set }
Camera : + double ymax { get; set }
Camera : + double zmin { get; set }
Camera : + double zmax { get; set }
Camera : + void PanEsquerda()
Camera : + void PanDireita()
Camera : + void PanCima()
Camera : + void PanBaixo()
Camera : + void ZoomIn()
Camera : + void ZoomOut()

Transformacao4D : {static} + readonly double DEG_TO_RAD
Transformacao4D : -double[4x4] matriz
Transformacao4D : +Transformacao4D()
Transformacao4D : +void AtribuirIdentidade()
Transformacao4D : +void AtribuirTranslacao(double tx, double ty, double tz)
Transformacao4D : +void AtribuirEscala(double sX, double sY, double sZ)
Transformacao4D : +void AtribuirRotacaoX(double radians)
Transformacao4D : +void AtribuirRotacaoY(double radians)
Transformacao4D : +void AtribuirRotacaoZ(double radians)
Transformacao4D : +Ponto4D MultiplicarPonto(Ponto4D pto)
Transformacao4D : +Transformacao4D MultiplicarMatriz(Transformacao4D t)
Transformacao4D : +double ObterElemento(int index)
Transformacao4D : +void AtribuirElemento(int index, double value)
Transformacao4D : +double[] ObterDados()
Transformacao4D : +void AtribuirDados(double[] data)
Transformacao4D : +void ExibeMatriz()

Mundo : - {static} Mundo instanciaMundo
Mundo : - Camera camera
Mundo : # List<Objeto> objetosLista
Mundo : - ObjetoAramado objetoSelecionado
Mundo : - Ponto4D pontoSelecionado
Mundo : - bool moverPto
Mundo : - PrimitiveType tipoPrimitiva
Mundo : - bool bBoxDesenhar
Mundo : + int mouseX
Mundo : + int mouseY
Mundo : - ObjetoAramado objetoNovo
Mundo : - String objetoId
Mundo : - Mundo(int width, int height)
Mundo : + {static} Mundo GetInstance(int width, int height)
Mundo : # void OnLoad(EventArgs e)
Mundo : # void OnUpdateFrame(FrameEventArgs e)
Mundo : # void OnRenderFrame(FrameEventArgs e)
Mundo : # void OnMouseDown(MouseButtonEventArgs e)
Mundo : - void MoverPonto()
Mundo : - void ApagarPontoAtual()
Mundo : - void RemoverPontoSelecionado()
Mundo : - void AdicionarPoligono()
Mundo : - double CalcularDistancia(Ponto4D pontoAtual, Ponto4D pontoNovo)
Mundo : # void OnKeyDown(KeyboardKeyEventArgs e)
Mundo : # void OnMouseMove(MouseMoveEventArgs e)
Mundo : - void Sru3D()
Mundo -- Camera
Mundo -- Objeto
Mundo -- ObjetoAramado
Mundo -- Ponto4D

Objeto : # String rotulo
Objeto : - PrimitiveType tipoPrimitiva
Objeto : - float primitivaTamanho
Objeto : # float primitivaTamanho { get; set }
Objeto : - BBox bBox
Objeto : + BBox bBox { get; set }
Objeto : - List<Objeto> objetosLista
Objeto : - Transformacao4D matriz
Objeto : - Transformacao4D matrizTmpTranslacao
Objeto : - Transformacao4D matrizTmpTranslacaoInversa
Objeto : - Transformacao4D matrizTmpEscala
Objeto : - Transformacao4D matrizTmpRotacao
Objeto : - Transformacao4D matrizGlobal
Objeto : + Objeto(string rotulo)
Objeto : + void Desenhar()
Objeto : # void DesenharAramado()
Objeto : + void FilhoAdicionar(Objeto filho)
Objeto : + void FilhoRemover(Objeto filho)
Objeto : # void PontosExibir()
Objeto : + void PontosExibirObjeto()
Objeto : + void ExibeMatriz()
Objeto : + void AtribuirIdentidade()
Objeto : + void TranslacaoXY(double tx, double ty)
Objeto : + void EscalaXY(double Sx, double Sy)
Objeto : + void EscalaXYBBox(double escala)
Objeto : + void RotacaoZ(double angulo)
Objeto : + void RotacaoZBBox(double angulo)
Objeto o-- BBox
Objeto o-- Transformacao4D

Ponto4D : - double x
Ponto4D : - double y
Ponto4D : - double z
Ponto4D : - readonly double w
Ponto4D : + Ponto4D(double x, double y, double z, double w)
Ponto4D : + Ponto4D(Ponto4D pto)
Ponto4D : + {static} Ponto4D operator +()
Ponto4D : + double X { get; set }
Ponto4D : + double Y { get; set }
Ponto4D : + double Z { get; set }
Ponto4D : + double W { get }
Ponto4D : + void InverterSinal()

ObjetoAramado : # List<Ponto4D> pontosLista
ObjetoAramado : + Color Cor { get; set }
ObjetoAramado : + ObjetoAramado(string rotulo)
ObjetoAramado : # void DesenharAramado()
ObjetoAramado : + void PontosAdicionar(Ponto4D pto)
ObjetoAramado : + void PontosRemoverUltimo()
ObjetoAramado : + void PontosRemoverTodos()
ObjetoAramado : + Ponto4D PontosUltimo()
ObjetoAramado : # void PontosExibir()
ObjetoAramado : + Ponto4D ObterUltimoPonto()
ObjetoAramado : + void RemoverUltimoPonto()
ObjetoAramado : + void DefinirPrimitiva(PrimitiveType primitiveType)
ObjetoAramado : + List<Ponto4D> ObterPontos()
ObjetoAramado : + int QuantidadePontos()
ObjetoAramado : + void RemoverPonto(Ponto4D pontoSelecionado)
ObjetoAramado : + bool IsPointInPolygon(Ponto4D p)
ObjetoAramado o-- Ponto4D

BBox : - double menorX
BBox : - double menorY
BBox : - double menorZ
BBox : - double maiorX
BBox : - double maiorY
BBox : - double maiorZ
BBox : - Ponto4D centro = new Ponto4D()
BBox : + BBox(double menorX, double menorY, double menorZ, double maiorX, double maiorY, double maiorZ)
BBox : + void Atribuir(Ponto4D pto)
BBox : + void Atualizar(Ponto4D pto)
BBox : + void Atualizar(double x, double y, double z)
BBox : + void ProcessarCentro()
BBox : + void Desenhar()
BBox : + double obterMenorX => menorX
BBox : + double obterMenorY => menorY
BBox : + double obterMenorZ => menorZ
BBox : + double obterMaiorX => maiorX
BBox : + double obterMaiorY => maiorY
BBox : + double obterMaiorZ => maiorZ
BBox : + Ponto4D obterCentro => centro
BBox o-- Ponto4D

@enduml
